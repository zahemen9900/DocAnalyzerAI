import sys
sys.path.append('../src')
import warnings
warnings.filterwarnings("ignore", category=FutureWarning)

from table_analyzer import TableAnalyzer
from pathlib import Path
import pandas as pd
import pytest

class TestTableAnalyzer:
    # @pytest.fixture
    # def analyzer(self):
    #     return TableAnalyzer()
    
    # @pytest.fixture
    # def sample_df(self):
    #     """Create a small sample DataFrame for testing"""
    #     return pd.DataFrame({
    #         'Year': ['2024', '2023', '2022'],
    #         'Net sales': ['391,035,000,000', '383,285,000,000', '394,328,000,000'],
    #         'Net income': ['93,736,000,000', '96,995,000,000', '99,803,000,000'],
    #         'Research and development': ['31,370,000,000', '29,915,000,000', '26,251,000,000']
    #     })

    # def test_preprocess_query(self, analyzer):
    #     """Test query preprocessing with various aliases"""
    #     test_cases = [
    #         ("What was the revenue in 2024?", "what was the net sales in 2024?"),
    #         ("Show me R&D expenses", "show me research and development expenses"),
    #         ("Calculate profit growth", "calculate net income growth"),
    #         ("Total earnings in 2023", "total net income in 2023"),
    #         ("Annual capex spending", "annual payments for acquisition of property, plant and equipment spending")
    #     ]
        
    #     for input_query, expected in test_cases:
    #         assert analyzer.preprocess_query(input_query) == expected

    def test_growth_rate_calculation(self, analyzer, sample_df):
        """Test growth rate calculations"""
        growth_rates = analyzer.calculate_growth_rate(sample_df, 'Net sales')
        
        # Check if growth rates are calculated correctly
        assert len(growth_rates) == 3
        assert isinstance(growth_rates['2024'], str)
        assert growth_rates['2024'].endswith('%')
        
        # Convert percentage strings to floats for comparison
        rates = {year: float(rate.strip('%')) for year, rate in growth_rates.items()}
        
        # 2024 growth should be positive (compared to 2023)
        assert rates['2024'] > 0
        
        # Basic sanity check - rates should be within reasonable bounds
        for rate in rates.values():
            assert -50 < rate < 50  # Assuming growth rates between -50% and 50%

    def test_real_data_queries(self):
        """Test queries on actual financial data"""
        analyzer = TableAnalyzer()
        df = analyzer.load_csv(Path("../data/apple_financials.csv"))
        
        test_queries = [
            ("What was the Net sales value for 2024?", "391,035,000,000"),
            ("What was the Research and development expense in 2024?", "31,370,000,000"),
            ("What is the operating income for 2023?", "114,301,000,000")
        ]
        
        for query, expected_contains in test_queries:
            answer = analyzer.query_table(df, query)
            # Check if the answer contains the expected value (allowing for formatting differences)
            assert expected_contains in answer, f"Failed query: {query}"

def main():
    # Manual testing section
    print("\nRunning manual tests...")
    analyzer = TableAnalyzer()
    
    # Load actual financial data
    csv_path = Path("/home/zahemen/projects/dl-lib/DocAnalyzerAI/data/AAPL/AAPL_financials.csv")
    df = analyzer.load_csv(csv_path)
    
    # Test basic queries
    test_queries = [
        "What was the Net sales value for 2024?",
        "What was the Operating income for 2023?",
        "What was the Research and development expense in 2024?",
        "What is the Net income for 2023?",
        "What was the cash generated by operating activities in 2022?"
    ]
    
    print("\nQuerying Apple financial data:")
    print("-" * 50)
    for query in test_queries:
        # Test preprocessing
        processed_query = analyzer.preprocess_query(query)
        print(f"Original query: {query}")
        print(f"Processed query: {processed_query}")
        
        # Get answer
        answer = analyzer.query_table(df, processed_query)
        print(f"Answer: {answer}\n")
    
    # Test growth rate calculation
    print("\nCalculating growth rates:")
    print("-" * 50)
    metrics = ['Net sales', 'Net income', 'Research and development']
    for metric in metrics:
        growth_rates = analyzer.calculate_growth_rate(df, metric)
        print(f"\n{metric} growth rates:")
        for year, rate in growth_rates.items():
            print(f"{year}: {rate}")

if __name__ == "__main__":
    main()
